@page "/"

<PageTitle>Home</PageTitle>

@using System.Threading
@using SimpleCRUD.Services
@using SimpleCRUD.ViewModels

@inject EmployeeService EmployeeService
@inject IDialogService DialogService

@rendermode InteractiveServer

<h2 class="text-center">
    Employee Management Systems
</h2>

<MudDataGrid @ref="dataGrid" T="EmployeeViewModel" ServerData="ServerReload" Filterable="false">
    <ToolBarContent>
        <MudButton 
            class ="me-2" 
            @onclick="CreateNewUser" 
            StartIcon="@Icons.Material.Filled.PersonAddAlt1" 
            Variant="Variant.Filled"
            Color="Color.Primary">
            Add New Employee
        </MudButton>

        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.EmployeeIdView" Title="Employee ID" />
        <PropertyColumn Property="x => x.FullName" Title="Full Name" />
        <PropertyColumn Property="x => x.Department" />
        <PropertyColumn Property="x => x.DateOfBirth" Format="dd MMM yyyy" Title="Date of Birth" />
        <PropertyColumn Property="x => x.Age" />
        <PropertyColumn Property="x => x.PhoneNumber" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButton Class="me-2"
                        Size="@Size.Small"
                        Variant="Variant.Filled"
                        StartIcon="@Icons.Material.Filled.Edit"
                        Color="@Color.Warning"
                        OnClick="@(() => this.UpdateEmployee(context))">
                        Update
                    </MudButton>
                <MudButton Size="@Size.Small"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Delete"
                           Color="@Color.Warning"
                           OnClick="@(() => this.RemoveEmployee(context))">
                           Delete
                </MudButton>
                </CellTemplate>
            </TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="EmployeeViewModel" />
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<EmployeeViewModel> dataGrid;
    string searchString = null;

    private async Task<GridData<EmployeeViewModel>> ServerReload(GridState<EmployeeViewModel> state)
    {
        IEnumerable<EmployeeViewModel> data = await EmployeeService.GetAllEmployees();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.EmployeeIdView.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        var totalItems = data.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(EmployeeViewModel.EmployeeIdView):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.EmployeeIdView
                    );
                    break;
                case nameof(EmployeeViewModel.FullName):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.FullName
                    );
                    break;
                case nameof(EmployeeViewModel.Department):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Department
                    );
                    break;
                case nameof(EmployeeViewModel.DateOfBirth):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.DateOfBirth
                    );
                    break;
                case nameof(EmployeeViewModel.Age):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Age
                    );
                    break;
                case nameof(EmployeeViewModel.PhoneNumber):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.PhoneNumber
                    );
                    break;
            }
        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<EmployeeViewModel>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private async Task CreateNewUser()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Large };

        var dialog = await DialogService.ShowAsync<CreateorUpdateEmployee>("Add Employee", options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            await dataGrid.ReloadServerData();

    }

    private async Task UpdateEmployee(CellContext<EmployeeViewModel> employee)
    {
        
    }
 
    private async Task RemoveEmployee(CellContext<EmployeeViewModel> employee)
    {

    }
}
